/**
 * UNICA INTERACT TESTER
 * <p>
 * IBM Confidential
 * (C) IBM Corp. 2013-14 - All rights reserved.
 * <p>
 * The source code for this program is not published or otherwise
 * divested of its trade secrets, irrespective of what has been
 * deposited with the U.S. Copyright Office.
 * <p>
 * Author: alessiosaltarin@it.ibm.com
 */

package com.ibm.it.interact.gui.panels;

import com.ibm.it.interact.client.Client;
import com.ibm.it.interact.client.data.BatchExecuteData;
import com.ibm.it.interact.client.data.RunData;
import com.ibm.it.interact.gui.MainForm;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 */
public class BatchExecute implements ITabbedPanel
{
    private static final String TITLE = "Batch Execute";

    private JPanel batchExecutePanel;
    private JCheckBox startSessionCheckBox;
    private JCheckBox getOffersCheckBox;
    private JCheckBox postEventCheckBox;
    private JButton runButton;
    private JPanel apiCheckPanel;
    private JCheckBox endSessionCheckBox;

    // Business logic variables
    private final MainForm parent;
    private final Client client;

    public BatchExecute(MainForm mainForm)
    {
        this.parent = mainForm;
        JFrame mainFrame = mainForm.getFrame();
        this.client = this.parent.getClient();
        runButton.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                run();
            }
        });
    }

    @Override
    public JPanel getPanel()
    {
        return this.batchExecutePanel;
    }

    @Override
    public void clear()
    {
        this.startSessionCheckBox.setSelected(false);
        this.getOffersCheckBox.setSelected(false);
        this.postEventCheckBox.setSelected(false);
        this.endSessionCheckBox.setSelected(false);
    }

    @Override
    public String getTitle()
    {
        return TITLE;
    }

    public void updateUIFromData(BatchExecuteData bed)
    {
        this.startSessionCheckBox.setSelected(bed.isExeStartSession());
        this.getOffersCheckBox.setSelected(bed.isExeGetOffers());
        this.postEventCheckBox.setSelected(bed.isExePostEvent());
        this.endSessionCheckBox.setSelected(bed.isExeEndSession());
    }

    BatchExecuteData getDataFromUI()
    {
        BatchExecuteData bed = new BatchExecuteData();

        bed.setExeStartSession(this.startSessionCheckBox.isSelected());
        bed.setExeGetOffers(this.getOffersCheckBox.isSelected());
        bed.setExePostEvent(this.postEventCheckBox.isSelected());
        bed.setExeEndSession(this.endSessionCheckBox.isSelected());

        return bed;
    }

    void run()
    {
        if (this.client != null)
        {
            BatchExecuteData bed = this.getDataFromUI();
            if (bed.numberOfCommands() > 0)
            {
                RunData rd = new RunData(this.parent.getInteractServer(), this.parent.getSessionId());

                if (bed.isExeStartSession())
                {
                    rd.setStartSessionData(parent.getStartSessionPanel().getDataFromUI());
                }

                if (bed.isExeGetOffers())
                {
                    rd.setGetOffersData(parent.getGetOffersPanel().getDataFromUI());
                }

                if (bed.isExePostEvent())
                {
                    rd.setPostEventData(parent.getPostEventPanel().getDataFromUI());
                }

                this.parent.showStatusMessage("Running BatchExecute...");
                rd.setBatchExecuteData(bed);
                this.client.runBatch(rd, this.endSessionCheckBox.isSelected());
                this.parent.showStatusMessage("Ready.");

            }
        }
        else
        {
            System.err.println("Critical: client is NULL.");
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        batchExecutePanel = new JPanel();
        batchExecutePanel.setLayout(new FormLayout("fill:157px:grow,left:4dlu:noGrow,fill:max(d;100px):noGrow", "center:d:grow"));
        batchExecutePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15), null));
        apiCheckPanel = new JPanel();
        apiCheckPanel.setLayout(new FormLayout("fill:20px:noGrow,left:4dlu:noGrow,fill:145px:grow,left:4dlu:noGrow,fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow"));
        apiCheckPanel.setBackground(UIManager.getColor("Button.background"));
        CellConstraints cc = new CellConstraints();
        batchExecutePanel.add(apiCheckPanel, new CellConstraints(1, 1, 1, 1, CellConstraints.DEFAULT, CellConstraints.TOP, new Insets(10, 10, 10, 20)));
        apiCheckPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), "API Selection"));
        startSessionCheckBox = new JCheckBox();
        startSessionCheckBox.setText("Start Session");
        apiCheckPanel.add(startSessionCheckBox, cc.xy(3, 3));
        getOffersCheckBox = new JCheckBox();
        getOffersCheckBox.setText("Get Offers");
        apiCheckPanel.add(getOffersCheckBox, cc.xy(3, 5));
        postEventCheckBox = new JCheckBox();
        postEventCheckBox.setText("Post Event");
        apiCheckPanel.add(postEventCheckBox, cc.xy(3, 7));
        final Spacer spacer1 = new Spacer();
        apiCheckPanel.add(spacer1, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final Spacer spacer2 = new Spacer();
        apiCheckPanel.add(spacer2, cc.xy(3, 1, CellConstraints.DEFAULT, CellConstraints.FILL));
        final Spacer spacer3 = new Spacer();
        apiCheckPanel.add(spacer3, cc.xy(3, 11, CellConstraints.DEFAULT, CellConstraints.FILL));
        final Spacer spacer4 = new Spacer();
        apiCheckPanel.add(spacer4, cc.xy(5, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        endSessionCheckBox = new JCheckBox();
        endSessionCheckBox.setText("End Session");
        apiCheckPanel.add(endSessionCheckBox, cc.xy(3, 9));
        runButton = new JButton();
        runButton.setText("Run");
        batchExecutePanel.add(runButton, cc.xy(3, 1, CellConstraints.DEFAULT, CellConstraints.BOTTOM));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont)
    {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null)
        {
            resultName = currentFont.getName();
        }
        else
        {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1'))
            {
                resultName = fontName;
            }
            else
            {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return batchExecutePanel;
    }
}
